function params = import_google_form_extra_real(filename)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [TIMESTAMP,EMAILADDRESS,NAME,ADDRESSWHEREWILLYOUBECOMINGFROM,WHATISTHEEARLIESTYOUCANLEAVE,DOYOUNEEDTOARRIVEBY730,HOWMANYSEATSARETHEREINYOURCAR]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [TIMESTAMP,EMAILADDRESS,NAME,ADDRESSWHEREWILLYOUBECOMINGFROM,WHATISTHEEARLIESTYOUCANLEAVE,DOYOUNEEDTOARRIVEBY730,HOWMANYSEATSARETHEREINYOURCAR]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Timestamp,EmailAddress,Name,Addresswherewillyoubecomingfrom,Whatistheearliestyoucanleave,Doyouneedtoarriveby730,Howmanyseatsarethereinyourcar] = importfile('HM_4_12_sample1.csv',2, 8);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/04/11 00:17:07

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{7};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 7) = numbers{1};
            raw{row, 7} = numbers{1};
        end
    catch me
    end
end

dateFormats = {'MM/dd/yy HH:mm:ss', 'hh:mm:ss a'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[1,5]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,5]}, 'InputFormat', dateFormats{col==[1,5]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,5]}, 'InputFormat', dateFormats{col==[1,5]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[1,5]);
blankDates = blankDates(:,[1,5]);
invalidDates = invalidDates(:,[1,5]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 7);
rawCellColumns = raw(:, [2,3,4,6]);


%% Allocate imported array to column variable names

Emails = rawCellColumns(:, 1);
Name = rawCellColumns(:, 2);
Address = rawCellColumns(:, 3);
leaveTime = dates{:, 2};
extra = rawCellColumns(:, 4);
numSeats = cell2mat(rawNumericColumns(:, 1));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% Timestamp=datenum(Timestamp);
% Whatistheearliestyoucanleave=datenum(Whatistheearliestyoucanleave);


%% Process leaveTime
leaveTime=datevec(leaveTime);
leaveTime = 60*leaveTime(:,4) + leaveTime(:,5);
leaveTime = leaveTime(1)-leaveTime;
leaveTime = leaveTime/60;

%% Process Extra
extra = double(strcmp(extra,'No'));

%% Save to struct
params.Emails = dataArray{2};
params.Name = Name;
params.Address = Address';
params.NumberCarSeats = numSeats;
params.HoursAvailableforTransit = leaveTime;
params.extra = extra;


